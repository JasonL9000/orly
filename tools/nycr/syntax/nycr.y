/* <tools/nycr/syntax/nycr.y>

   This file was generated by nycr. */

%{
#include <tools/nycr/error.h>
#include <tools/nycr/syntax/nycr.cst.h>
using namespace Tools::Nycr::Syntax;
extern TNycr *Nycr_;
#define YYLOC_DEFAULT tools_nycr_syntax__yylloc_default
%}

%code {
  int tools_nycr_syntax__lex(YYSTYPE *, YYLTYPE *);
  void tools_nycr_syntax__error(const YYLTYPE *, char const *);
}

%defines
%locations
%pure-parser
%name-prefix "tools_nycr_syntax__"
%glr-parser
%error-verbose
%expect 0
%expect-rr 0

%union {
  TNycr *nycr;
  TOptDeclSeq *opt_decl_seq;
  TNoDeclSeq *no_decl_seq;
  TDeclSeq *decl_seq;
  TDecl *decl;
  TPrecLevel *prec_level;
  TPrecKwd *prec_kwd;
  TName *name;
  TSemi *semi;
  TKind *kind;
  TBase *base;
  TOptSuper *opt_super;
  TSuper *super;
  TColon *colon;
  TNoSuper *no_super;
  TRule *rule;
  TOptRhs *opt_rhs;
  TRhs *rhs;
  TArrow *arrow;
  TOptMemberSeq *opt_member_seq;
  TNoMemberSeq *no_member_seq;
  TMemberSeq *member_seq;
  TMember *member;
  TAnonymousMember *anonymous_member;
  TErrorMember *error_member;
  TErrorKwd *error_kwd;
  TNamedMember *named_member;
  TOptOperRef *opt_oper_ref;
  TOperRef *oper_ref;
  TNoOperRef *no_oper_ref;
  TNoRhs *no_rhs;
  TEmptyKwd *empty_kwd;
  TLanguage *language;
  TOpenAngle *open_angle;
  TOptPath *opt_path;
  TPath *path;
  TOptPathTail *opt_path_tail;
  TNoPathTail *no_path_tail;
  TPathTail *path_tail;
  TSlash *slash;
  TNoPath *no_path;
  TCloseAngle *close_angle;
  TOptExpectedSr *opt_expected_sr;
  TNoExpectedSr *no_expected_sr;
  TExpectedSr *expected_sr;
  TSrKwd *sr_kwd;
  TIntLiteral *int_literal;
  TOptExpectedRr *opt_expected_rr;
  TNoExpectedRr *no_expected_rr;
  TExpectedRr *expected_rr;
  TRrKwd *rr_kwd;
  TOper *oper;
  TPattern *pattern;
  TEq *eq;
  TStrLiteral *str_literal;
  TSingleQuotedRawStrLiteral *single_quoted_raw_str_literal;
  TDoubleQuotedStrLiteral *double_quoted_str_literal;
  TSingleQuotedStrLiteral *single_quoted_str_literal;
  TDoubleQuotedRawStrLiteral *double_quoted_raw_str_literal;
  TOptPriLevel *opt_pri_level;
  TPriLevel *pri_level;
  TPriKwd *pri_kwd;
  TNoPriLevel *no_pri_level;
  TAssoc *assoc;
  TNonassocKwd *nonassoc_kwd;
  TLeftKwd *left_kwd;
  TRightKwd *right_kwd;
  TKeyword *keyword;
  TBadDecl *bad_decl;
}

%type <nycr> Nycr;
%type <opt_decl_seq> OptDeclSeq;
%type <no_decl_seq> NoDeclSeq;
%type <decl_seq> DeclSeq;
%type <decl> Decl;
%type <prec_level> PrecLevel;
%token <prec_kwd> PrecKwd;
%token <name> Name;
%token <semi> Semi;
%type <kind> Kind;
%type <base> Base;
%type <opt_super> OptSuper;
%type <super> Super;
%token <colon> Colon;
%type <no_super> NoSuper;
%type <rule> Rule;
%type <opt_rhs> OptRhs;
%type <rhs> Rhs;
%token <arrow> Arrow;
%type <opt_member_seq> OptMemberSeq;
%type <no_member_seq> NoMemberSeq;
%type <member_seq> MemberSeq;
%type <member> Member;
%type <anonymous_member> AnonymousMember;
%type <error_member> ErrorMember;
%token <error_kwd> ErrorKwd;
%type <named_member> NamedMember;
%type <opt_oper_ref> OptOperRef;
%type <oper_ref> OperRef;
%type <no_oper_ref> NoOperRef;
%type <no_rhs> NoRhs;
%token <empty_kwd> EmptyKwd;
%type <language> Language;
%token <open_angle> OpenAngle;
%type <opt_path> OptPath;
%type <path> Path;
%type <opt_path_tail> OptPathTail;
%type <no_path_tail> NoPathTail;
%type <path_tail> PathTail;
%token <slash> Slash;
%type <no_path> NoPath;
%token <close_angle> CloseAngle;
%type <opt_expected_sr> OptExpectedSr;
%type <no_expected_sr> NoExpectedSr;
%type <expected_sr> ExpectedSr;
%token <sr_kwd> SrKwd;
%token <int_literal> IntLiteral;
%type <opt_expected_rr> OptExpectedRr;
%type <no_expected_rr> NoExpectedRr;
%type <expected_rr> ExpectedRr;
%token <rr_kwd> RrKwd;
%type <oper> Oper;
%type <pattern> Pattern;
%token <eq> Eq;
%type <str_literal> StrLiteral;
%token <single_quoted_raw_str_literal> SingleQuotedRawStrLiteral;
%token <double_quoted_str_literal> DoubleQuotedStrLiteral;
%token <single_quoted_str_literal> SingleQuotedStrLiteral;
%token <double_quoted_raw_str_literal> DoubleQuotedRawStrLiteral;
%type <opt_pri_level> OptPriLevel;
%type <pri_level> PriLevel;
%token <pri_kwd> PriKwd;
%type <no_pri_level> NoPriLevel;
%type <assoc> Assoc;
%token <nonassoc_kwd> NonassocKwd;
%token <left_kwd> LeftKwd;
%token <right_kwd> RightKwd;
%type <keyword> Keyword;
%type <bad_decl> BadDecl;


%start Nycr

%%

Nycr
  : OptDeclSeq {
    $$ = new TNycr($1);
    Nycr_ = $$;
  }
;

OptDeclSeq
  : NoDeclSeq {
    $$ = $1;
  }
  | DeclSeq {
    $$ = $1;
  }
;

NoDeclSeq
  : /* empty */ {
    $$ = new TNoDeclSeq();
  }
;

DeclSeq
  : Decl OptDeclSeq {
    $$ = new TDeclSeq($1, $2);
  }
;

Decl
  : PrecLevel {
    $$ = $1;
  }
  | Kind {
    $$ = $1;
  }
  | BadDecl {
    $$ = $1;
  }
;

PrecLevel
  : PrecKwd Name Semi {
    $$ = new TPrecLevel($1, $2, $3);
  }
;

Kind
  : Base {
    $$ = $1;
  }
  | Rule {
    $$ = $1;
  }
  | Language {
    $$ = $1;
  }
  | Oper {
    $$ = $1;
  }
  | Keyword {
    $$ = $1;
  }
;

Base
  : Name OptSuper Semi {
    $$ = new TBase($1, $2, $3);
  }
;

OptSuper
  : Super {
    $$ = $1;
  }
  | NoSuper {
    $$ = $1;
  }
;

Super
  : Colon Name {
    $$ = new TSuper($1, $2);
  }
;

NoSuper
  : /* empty */ {
    $$ = new TNoSuper();
  }
;

Rule
  : Name OptSuper OptRhs Semi {
    $$ = new TRule($1, $2, $3, $4);
  }
;

OptRhs
  : Rhs {
    $$ = $1;
  }
  | NoRhs {
    $$ = $1;
  }
;

Rhs
  : Arrow MemberSeq OptOperRef {
    $$ = new TRhs($1, $2, $3);
  }
;

OptMemberSeq
  : NoMemberSeq {
    $$ = $1;
  }
  | MemberSeq {
    $$ = $1;
  }
;

NoMemberSeq
  : /* empty */ {
    $$ = new TNoMemberSeq();
  }
;

MemberSeq
  : Member OptMemberSeq {
    $$ = new TMemberSeq($1, $2);
  }
;

Member
  : AnonymousMember {
    $$ = $1;
  }
  | ErrorMember {
    $$ = $1;
  }
  | NamedMember {
    $$ = $1;
  }
;

AnonymousMember
  : Name {
    $$ = new TAnonymousMember($1);
  }
;

ErrorMember
  : ErrorKwd {
    $$ = new TErrorMember($1);
  }
;

NamedMember
  : Name Colon Name {
    $$ = new TNamedMember($1, $2, $3);
  }
;

OptOperRef
  : OperRef {
    $$ = $1;
  }
  | NoOperRef {
    $$ = $1;
  }
;

OperRef
  : PrecKwd Name {
    $$ = new TOperRef($1, $2);
  }
;

NoOperRef
  : /* empty */ {
    $$ = new TNoOperRef();
  }
;

NoRhs
  : Arrow EmptyKwd {
    $$ = new TNoRhs($1, $2);
  }
;

Language
  : Name OptSuper OptRhs OpenAngle OptPath CloseAngle OptExpectedSr OptExpectedRr Semi {
    $$ = new TLanguage($1, $2, $3, $4, $5, $6, $7, $8, $9);
  }
;

OptPath
  : Path {
    $$ = $1;
  }
  | NoPath {
    $$ = $1;
  }
;

Path
  : Name OptPathTail {
    $$ = new TPath($1, $2);
  }
;

OptPathTail
  : NoPathTail {
    $$ = $1;
  }
  | PathTail {
    $$ = $1;
  }
;

NoPathTail
  : /* empty */ {
    $$ = new TNoPathTail();
  }
;

PathTail
  : Slash Path {
    $$ = new TPathTail($1, $2);
  }
;

NoPath
  : /* empty */ {
    $$ = new TNoPath();
  }
;

OptExpectedSr
  : NoExpectedSr {
    $$ = $1;
  }
  | ExpectedSr {
    $$ = $1;
  }
;

NoExpectedSr
  : /* empty */ {
    $$ = new TNoExpectedSr();
  }
;

ExpectedSr
  : SrKwd IntLiteral {
    $$ = new TExpectedSr($1, $2);
  }
;

OptExpectedRr
  : NoExpectedRr {
    $$ = $1;
  }
  | ExpectedRr {
    $$ = $1;
  }
;

NoExpectedRr
  : /* empty */ {
    $$ = new TNoExpectedRr();
  }
;

ExpectedRr
  : RrKwd IntLiteral {
    $$ = new TExpectedRr($1, $2);
  }
;

Oper
  : Name OptSuper Pattern Name Assoc Semi {
    $$ = new TOper($1, $2, $3, $4, $5, $6);
  }
;

Pattern
  : Eq StrLiteral OptPriLevel {
    $$ = new TPattern($1, $2, $3);
  }
;

StrLiteral
  : SingleQuotedRawStrLiteral {
    $$ = $1;
  }
  | DoubleQuotedStrLiteral {
    $$ = $1;
  }
  | SingleQuotedStrLiteral {
    $$ = $1;
  }
  | DoubleQuotedRawStrLiteral {
    $$ = $1;
  }
;

OptPriLevel
  : PriLevel {
    $$ = $1;
  }
  | NoPriLevel {
    $$ = $1;
  }
;

PriLevel
  : PriKwd IntLiteral {
    $$ = new TPriLevel($1, $2);
  }
;

NoPriLevel
  : /* empty */ {
    $$ = new TNoPriLevel();
  }
;

Assoc
  : NonassocKwd {
    $$ = $1;
  }
  | LeftKwd {
    $$ = $1;
  }
  | RightKwd {
    $$ = $1;
  }
;

Keyword
  : Name OptSuper Pattern Semi {
    $$ = new TKeyword($1, $2, $3, $4);
  }
;

BadDecl
  : error Semi {
    $$ = new TBadDecl($2);
  }
;

%%

void tools_nycr_syntax__error(const YYLTYPE *loc, char const *msg) {
  new ::Tools::Nycr::TError(loc->first_line, loc->first_column, loc->last_line, loc->last_column, msg);
}
