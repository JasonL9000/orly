/* <tools/nycr/syntax/nycr.dump.cc>

   This file was generated by nycr. */

#include <cstdio>
#include <iostream>
#include <unistd.h>

#include <base/thrower.h>
#include <tools/nycr/error.h>
#include <tools/nycr/syntax/nycr.cst.h>

using namespace std;

int main(int argc, char *argv[]) {
  int result;
  try {
    for (;;) {
      int opt = getopt(argc, argv, "");
      if (opt < 0) {
        break;
      }
      THROW << "unknown option '" << optopt << '\'';
    }
    if (optind == argc) {
      THROW << "no compiland";
    }
    if (optind < argc - 1) {
      THROW << "multiple compilands not allowed";
    }
    auto cst = Tools::Nycr::Syntax::TNycr::ParseFile(argv[optind]);
    try {
      if (!Tools::Nycr::TError::GetFirstError()) {
        cst->Write(cout, 0, 0);
        result = EXIT_SUCCESS;
      } else {
        for (Tools::Nycr::TError *error = Tools::Nycr::TError::GetFirstError(); error; error = error->GetNextError()) {
          cerr << error->GetPosRange() << ' ' << error->GetMsg() << endl;
        }
        result = EXIT_FAILURE;
      }
    } catch (...) {
      delete cst;
      throw;
    }
    delete cst;
  } catch (const exception &ex) {
    cerr << "exception: " << ex.what() << endl;
    result = EXIT_FAILURE;
  }
  return result;
}
