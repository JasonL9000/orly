/* <tools/nycr/syntax/nycr.cst.h>

   This file was generated by nycr. */

#pragma once

#include <cassert>
#include <ostream>

#include <base/no_copy_semantics.h>
#include <tools/nycr/indent.h>
#include <tools/nycr/lexeme.h>
#include <tools/nycr/test.h>

namespace Tools {
namespace Nycr {
namespace Syntax {

class TNycr;
class TOptDeclSeq;
class TNoDeclSeq;
class TDeclSeq;
class TDecl;
class TPrecLevel;
class TPrecKwd;
class TName;
class TSemi;
class TKind;
class TBase;
class TOptSuper;
class TSuper;
class TColon;
class TNoSuper;
class TRule;
class TOptRhs;
class TRhs;
class TArrow;
class TOptMemberSeq;
class TNoMemberSeq;
class TMemberSeq;
class TMember;
class TAnonymousMember;
class TErrorMember;
class TErrorKwd;
class TNamedMember;
class TOptOperRef;
class TOperRef;
class TNoOperRef;
class TNoRhs;
class TEmptyKwd;
class TLanguage;
class TOpenAngle;
class TOptPath;
class TPath;
class TOptPathTail;
class TNoPathTail;
class TPathTail;
class TSlash;
class TNoPath;
class TCloseAngle;
class TOptExpectedSr;
class TNoExpectedSr;
class TExpectedSr;
class TSrKwd;
class TIntLiteral;
class TOptExpectedRr;
class TNoExpectedRr;
class TExpectedRr;
class TRrKwd;
class TOper;
class TPattern;
class TEq;
class TStrLiteral;
class TSingleQuotedRawStrLiteral;
class TDoubleQuotedStrLiteral;
class TSingleQuotedStrLiteral;
class TDoubleQuotedRawStrLiteral;
class TOptPriLevel;
class TPriLevel;
class TPriKwd;
class TNoPriLevel;
class TAssoc;
class TNonassocKwd;
class TLeftKwd;
class TRightKwd;
class TKeyword;
class TBadDecl;

// nycr -> opt_decl_seq <tools/nycr/syntax> sr 0 rr 0;
class TNycr {
  NO_COPY_SEMANTICS(TNycr);
  public:
  TNycr(TOptDeclSeq *opt_decl_seq)
      : OptDeclSeq(opt_decl_seq) {
    assert(opt_decl_seq);
  }
  virtual ~TNycr();
  const TOptDeclSeq *GetOptDeclSeq() const {
    assert(this);
    return OptDeclSeq;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  static TNycr *ParseFile(const char *path);
  static TNycr *ParseStr(const char *str);
  private:
  TOptDeclSeq *OptDeclSeq;
};  // TNycr

// opt_decl_seq;
class TOptDeclSeq {
  NO_COPY_SEMANTICS(TOptDeclSeq);
  public:
  class TVisitor { 
    public:
      virtual ~TVisitor() {}
      virtual void operator()(const ::Tools::Nycr::Syntax::TNoDeclSeq *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TDeclSeq *that) const = 0;
    protected:
      TVisitor() {}
    };  // TVisitor
  virtual ~TOptDeclSeq() {}
  virtual void Accept(const TVisitor &visitor) const = 0;
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const = 0;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const = 0;
  protected:
  TOptDeclSeq() {}
};  // TOptDeclSeq

// no_decl_seq : opt_decl_seq -> empty;
class TNoDeclSeq : public TOptDeclSeq {
  NO_COPY_SEMANTICS(TNoDeclSeq);
  public:
  TNoDeclSeq() {}
  virtual void Accept(const TOptDeclSeq::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
};  // TNoDeclSeq

// decl_seq : opt_decl_seq -> decl opt_decl_seq;
class TDeclSeq : public TOptDeclSeq {
  NO_COPY_SEMANTICS(TDeclSeq);
  public:
  TDeclSeq(TDecl *decl, TOptDeclSeq *opt_decl_seq)
      : Decl(decl), OptDeclSeq(opt_decl_seq) {
    assert(decl);
    assert(opt_decl_seq);
  }
  virtual ~TDeclSeq();
  virtual void Accept(const TOptDeclSeq::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TDecl *GetDecl() const {
    assert(this);
    return Decl;
  }
  const TOptDeclSeq *GetOptDeclSeq() const {
    assert(this);
    return OptDeclSeq;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TDecl *Decl;
  TOptDeclSeq *OptDeclSeq;
};  // TDeclSeq

// decl;
class TDecl {
  NO_COPY_SEMANTICS(TDecl);
  public:
  class TVisitor { 
    public:
      virtual ~TVisitor() {}
      virtual void operator()(const ::Tools::Nycr::Syntax::TPrecLevel *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TBase *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TRule *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TLanguage *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TOper *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TKeyword *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TBadDecl *that) const = 0;
    protected:
      TVisitor() {}
    };  // TVisitor
  virtual ~TDecl() {}
  virtual void Accept(const TVisitor &visitor) const = 0;
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const = 0;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const = 0;
  protected:
  TDecl() {}
};  // TDecl

// prec_level : decl -> prec_kwd name semi;
class TPrecLevel : public TDecl {
  NO_COPY_SEMANTICS(TPrecLevel);
  public:
  TPrecLevel(TPrecKwd *prec_kwd, TName *name, TSemi *semi)
      : PrecKwd(prec_kwd), Name(name), Semi(semi) {
    assert(prec_kwd);
    assert(name);
    assert(semi);
  }
  virtual ~TPrecLevel();
  virtual void Accept(const TDecl::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TPrecKwd *GetPrecKwd() const {
    assert(this);
    return PrecKwd;
  }
  const TName *GetName() const {
    assert(this);
    return Name;
  }
  const TSemi *GetSemi() const {
    assert(this);
    return Semi;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TPrecKwd *PrecKwd;
  TName *Name;
  TSemi *Semi;
};  // TPrecLevel

// prec_kwd = "prec" pri 0;
class TPrecKwd {
  NO_COPY_SEMANTICS(TPrecKwd);
  public:
  TPrecKwd(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TPrecKwd

// name = "[a-zA-Z]+[a-zA-Z0-9_]*" pri 2;
class TName {
  NO_COPY_SEMANTICS(TName);
  public:
  TName(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TName

// semi = "\";\"" pri 0;
class TSemi {
  NO_COPY_SEMANTICS(TSemi);
  public:
  TSemi(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TSemi

// kind : decl;
class TKind : public TDecl {
  NO_COPY_SEMANTICS(TKind);
  public:
  class TVisitor { 
    public:
      virtual ~TVisitor() {}
      virtual void operator()(const ::Tools::Nycr::Syntax::TBase *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TRule *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TLanguage *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TOper *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TKeyword *that) const = 0;
    protected:
      TVisitor() {}
    };  // TVisitor
  virtual ~TKind() {}
  virtual void Accept(const TVisitor &visitor) const = 0;
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const = 0;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const = 0;
  protected:
  TKind() {}
};  // TKind

// base : kind -> name opt_super semi;
class TBase : public TKind {
  NO_COPY_SEMANTICS(TBase);
  public:
  TBase(TName *name, TOptSuper *opt_super, TSemi *semi)
      : Name(name), OptSuper(opt_super), Semi(semi) {
    assert(name);
    assert(opt_super);
    assert(semi);
  }
  virtual ~TBase();
  virtual void Accept(const TKind::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  virtual void Accept(const TDecl::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TName *GetName() const {
    assert(this);
    return Name;
  }
  const TOptSuper *GetOptSuper() const {
    assert(this);
    return OptSuper;
  }
  const TSemi *GetSemi() const {
    assert(this);
    return Semi;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TName *Name;
  TOptSuper *OptSuper;
  TSemi *Semi;
};  // TBase

// opt_super;
class TOptSuper {
  NO_COPY_SEMANTICS(TOptSuper);
  public:
  class TVisitor { 
    public:
      virtual ~TVisitor() {}
      virtual void operator()(const ::Tools::Nycr::Syntax::TSuper *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TNoSuper *that) const = 0;
    protected:
      TVisitor() {}
    };  // TVisitor
  virtual ~TOptSuper() {}
  virtual void Accept(const TVisitor &visitor) const = 0;
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const = 0;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const = 0;
  protected:
  TOptSuper() {}
};  // TOptSuper

// super : opt_super -> colon name;
class TSuper : public TOptSuper {
  NO_COPY_SEMANTICS(TSuper);
  public:
  TSuper(TColon *colon, TName *name)
      : Colon(colon), Name(name) {
    assert(colon);
    assert(name);
  }
  virtual ~TSuper();
  virtual void Accept(const TOptSuper::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TColon *GetColon() const {
    assert(this);
    return Colon;
  }
  const TName *GetName() const {
    assert(this);
    return Name;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TColon *Colon;
  TName *Name;
};  // TSuper

// colon = "\":\"" pri 0;
class TColon {
  NO_COPY_SEMANTICS(TColon);
  public:
  TColon(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TColon

// no_super : opt_super -> empty;
class TNoSuper : public TOptSuper {
  NO_COPY_SEMANTICS(TNoSuper);
  public:
  TNoSuper() {}
  virtual void Accept(const TOptSuper::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
};  // TNoSuper

// rule : kind -> name opt_super opt_rhs semi;
class TRule : public TKind {
  NO_COPY_SEMANTICS(TRule);
  public:
  TRule(TName *name, TOptSuper *opt_super, TOptRhs *opt_rhs, TSemi *semi)
      : Name(name), OptSuper(opt_super), OptRhs(opt_rhs), Semi(semi) {
    assert(name);
    assert(opt_super);
    assert(opt_rhs);
    assert(semi);
  }
  virtual ~TRule();
  virtual void Accept(const TKind::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  virtual void Accept(const TDecl::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TName *GetName() const {
    assert(this);
    return Name;
  }
  const TOptSuper *GetOptSuper() const {
    assert(this);
    return OptSuper;
  }
  const TOptRhs *GetOptRhs() const {
    assert(this);
    return OptRhs;
  }
  const TSemi *GetSemi() const {
    assert(this);
    return Semi;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TName *Name;
  TOptSuper *OptSuper;
  TOptRhs *OptRhs;
  TSemi *Semi;
};  // TRule

// opt_rhs;
class TOptRhs {
  NO_COPY_SEMANTICS(TOptRhs);
  public:
  class TVisitor { 
    public:
      virtual ~TVisitor() {}
      virtual void operator()(const ::Tools::Nycr::Syntax::TRhs *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TNoRhs *that) const = 0;
    protected:
      TVisitor() {}
    };  // TVisitor
  virtual ~TOptRhs() {}
  virtual void Accept(const TVisitor &visitor) const = 0;
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const = 0;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const = 0;
  protected:
  TOptRhs() {}
};  // TOptRhs

// rhs : opt_rhs -> arrow member_seq opt_oper_ref;
class TRhs : public TOptRhs {
  NO_COPY_SEMANTICS(TRhs);
  public:
  TRhs(TArrow *arrow, TMemberSeq *member_seq, TOptOperRef *opt_oper_ref)
      : Arrow(arrow), MemberSeq(member_seq), OptOperRef(opt_oper_ref) {
    assert(arrow);
    assert(member_seq);
    assert(opt_oper_ref);
  }
  virtual ~TRhs();
  virtual void Accept(const TOptRhs::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TArrow *GetArrow() const {
    assert(this);
    return Arrow;
  }
  const TMemberSeq *GetMemberSeq() const {
    assert(this);
    return MemberSeq;
  }
  const TOptOperRef *GetOptOperRef() const {
    assert(this);
    return OptOperRef;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TArrow *Arrow;
  TMemberSeq *MemberSeq;
  TOptOperRef *OptOperRef;
};  // TRhs

// arrow = "\"->\"" pri 0;
class TArrow {
  NO_COPY_SEMANTICS(TArrow);
  public:
  TArrow(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TArrow

// opt_member_seq;
class TOptMemberSeq {
  NO_COPY_SEMANTICS(TOptMemberSeq);
  public:
  class TVisitor { 
    public:
      virtual ~TVisitor() {}
      virtual void operator()(const ::Tools::Nycr::Syntax::TNoMemberSeq *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TMemberSeq *that) const = 0;
    protected:
      TVisitor() {}
    };  // TVisitor
  virtual ~TOptMemberSeq() {}
  virtual void Accept(const TVisitor &visitor) const = 0;
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const = 0;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const = 0;
  protected:
  TOptMemberSeq() {}
};  // TOptMemberSeq

// no_member_seq : opt_member_seq -> empty;
class TNoMemberSeq : public TOptMemberSeq {
  NO_COPY_SEMANTICS(TNoMemberSeq);
  public:
  TNoMemberSeq() {}
  virtual void Accept(const TOptMemberSeq::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
};  // TNoMemberSeq

// member_seq : opt_member_seq -> member opt_member_seq;
class TMemberSeq : public TOptMemberSeq {
  NO_COPY_SEMANTICS(TMemberSeq);
  public:
  TMemberSeq(TMember *member, TOptMemberSeq *opt_member_seq)
      : Member(member), OptMemberSeq(opt_member_seq) {
    assert(member);
    assert(opt_member_seq);
  }
  virtual ~TMemberSeq();
  virtual void Accept(const TOptMemberSeq::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TMember *GetMember() const {
    assert(this);
    return Member;
  }
  const TOptMemberSeq *GetOptMemberSeq() const {
    assert(this);
    return OptMemberSeq;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TMember *Member;
  TOptMemberSeq *OptMemberSeq;
};  // TMemberSeq

// member;
class TMember {
  NO_COPY_SEMANTICS(TMember);
  public:
  class TVisitor { 
    public:
      virtual ~TVisitor() {}
      virtual void operator()(const ::Tools::Nycr::Syntax::TAnonymousMember *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TErrorMember *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TNamedMember *that) const = 0;
    protected:
      TVisitor() {}
    };  // TVisitor
  virtual ~TMember() {}
  virtual void Accept(const TVisitor &visitor) const = 0;
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const = 0;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const = 0;
  protected:
  TMember() {}
};  // TMember

// anonymous_member : member -> name;
class TAnonymousMember : public TMember {
  NO_COPY_SEMANTICS(TAnonymousMember);
  public:
  TAnonymousMember(TName *name)
      : Name(name) {
    assert(name);
  }
  virtual ~TAnonymousMember();
  virtual void Accept(const TMember::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TName *GetName() const {
    assert(this);
    return Name;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TName *Name;
};  // TAnonymousMember

// error_member : member -> error_kwd;
class TErrorMember : public TMember {
  NO_COPY_SEMANTICS(TErrorMember);
  public:
  TErrorMember(TErrorKwd *error_kwd)
      : ErrorKwd(error_kwd) {
    assert(error_kwd);
  }
  virtual ~TErrorMember();
  virtual void Accept(const TMember::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TErrorKwd *GetErrorKwd() const {
    assert(this);
    return ErrorKwd;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TErrorKwd *ErrorKwd;
};  // TErrorMember

// error_kwd = "error" pri 0;
class TErrorKwd {
  NO_COPY_SEMANTICS(TErrorKwd);
  public:
  TErrorKwd(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TErrorKwd

// named_member : member -> name:name colon kind:name;
class TNamedMember : public TMember {
  NO_COPY_SEMANTICS(TNamedMember);
  public:
  TNamedMember(TName *name, TColon *colon, TName *kind)
      : Name(name), Colon(colon), Kind(kind) {
    assert(name);
    assert(colon);
    assert(kind);
  }
  virtual ~TNamedMember();
  virtual void Accept(const TMember::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TName *GetName() const {
    assert(this);
    return Name;
  }
  const TColon *GetColon() const {
    assert(this);
    return Colon;
  }
  const TName *GetKind() const {
    assert(this);
    return Kind;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TName *Name;
  TColon *Colon;
  TName *Kind;
};  // TNamedMember

// opt_oper_ref;
class TOptOperRef {
  NO_COPY_SEMANTICS(TOptOperRef);
  public:
  class TVisitor { 
    public:
      virtual ~TVisitor() {}
      virtual void operator()(const ::Tools::Nycr::Syntax::TOperRef *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TNoOperRef *that) const = 0;
    protected:
      TVisitor() {}
    };  // TVisitor
  virtual ~TOptOperRef() {}
  virtual void Accept(const TVisitor &visitor) const = 0;
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const = 0;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const = 0;
  protected:
  TOptOperRef() {}
};  // TOptOperRef

// oper_ref : opt_oper_ref -> prec_kwd name;
class TOperRef : public TOptOperRef {
  NO_COPY_SEMANTICS(TOperRef);
  public:
  TOperRef(TPrecKwd *prec_kwd, TName *name)
      : PrecKwd(prec_kwd), Name(name) {
    assert(prec_kwd);
    assert(name);
  }
  virtual ~TOperRef();
  virtual void Accept(const TOptOperRef::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TPrecKwd *GetPrecKwd() const {
    assert(this);
    return PrecKwd;
  }
  const TName *GetName() const {
    assert(this);
    return Name;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TPrecKwd *PrecKwd;
  TName *Name;
};  // TOperRef

// no_oper_ref : opt_oper_ref -> empty;
class TNoOperRef : public TOptOperRef {
  NO_COPY_SEMANTICS(TNoOperRef);
  public:
  TNoOperRef() {}
  virtual void Accept(const TOptOperRef::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
};  // TNoOperRef

// no_rhs : opt_rhs -> arrow empty_kwd;
class TNoRhs : public TOptRhs {
  NO_COPY_SEMANTICS(TNoRhs);
  public:
  TNoRhs(TArrow *arrow, TEmptyKwd *empty_kwd)
      : Arrow(arrow), EmptyKwd(empty_kwd) {
    assert(arrow);
    assert(empty_kwd);
  }
  virtual ~TNoRhs();
  virtual void Accept(const TOptRhs::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TArrow *GetArrow() const {
    assert(this);
    return Arrow;
  }
  const TEmptyKwd *GetEmptyKwd() const {
    assert(this);
    return EmptyKwd;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TArrow *Arrow;
  TEmptyKwd *EmptyKwd;
};  // TNoRhs

// empty_kwd = "empty" pri 0;
class TEmptyKwd {
  NO_COPY_SEMANTICS(TEmptyKwd);
  public:
  TEmptyKwd(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TEmptyKwd

// language : kind -> name opt_super opt_rhs open_angle opt_path close_angle opt_expected_sr opt_expected_rr semi;
class TLanguage : public TKind {
  NO_COPY_SEMANTICS(TLanguage);
  public:
  TLanguage(TName *name, TOptSuper *opt_super, TOptRhs *opt_rhs, TOpenAngle *open_angle, TOptPath *opt_path, TCloseAngle *close_angle, TOptExpectedSr *opt_expected_sr, TOptExpectedRr *opt_expected_rr, TSemi *semi)
      : Name(name), OptSuper(opt_super), OptRhs(opt_rhs), OpenAngle(open_angle), OptPath(opt_path), CloseAngle(close_angle), OptExpectedSr(opt_expected_sr), OptExpectedRr(opt_expected_rr), Semi(semi) {
    assert(name);
    assert(opt_super);
    assert(opt_rhs);
    assert(open_angle);
    assert(opt_path);
    assert(close_angle);
    assert(opt_expected_sr);
    assert(opt_expected_rr);
    assert(semi);
  }
  virtual ~TLanguage();
  virtual void Accept(const TKind::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  virtual void Accept(const TDecl::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TName *GetName() const {
    assert(this);
    return Name;
  }
  const TOptSuper *GetOptSuper() const {
    assert(this);
    return OptSuper;
  }
  const TOptRhs *GetOptRhs() const {
    assert(this);
    return OptRhs;
  }
  const TOpenAngle *GetOpenAngle() const {
    assert(this);
    return OpenAngle;
  }
  const TOptPath *GetOptPath() const {
    assert(this);
    return OptPath;
  }
  const TCloseAngle *GetCloseAngle() const {
    assert(this);
    return CloseAngle;
  }
  const TOptExpectedSr *GetOptExpectedSr() const {
    assert(this);
    return OptExpectedSr;
  }
  const TOptExpectedRr *GetOptExpectedRr() const {
    assert(this);
    return OptExpectedRr;
  }
  const TSemi *GetSemi() const {
    assert(this);
    return Semi;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TName *Name;
  TOptSuper *OptSuper;
  TOptRhs *OptRhs;
  TOpenAngle *OpenAngle;
  TOptPath *OptPath;
  TCloseAngle *CloseAngle;
  TOptExpectedSr *OptExpectedSr;
  TOptExpectedRr *OptExpectedRr;
  TSemi *Semi;
};  // TLanguage

// open_angle = "\"<\"" pri 0;
class TOpenAngle {
  NO_COPY_SEMANTICS(TOpenAngle);
  public:
  TOpenAngle(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TOpenAngle

// opt_path;
class TOptPath {
  NO_COPY_SEMANTICS(TOptPath);
  public:
  class TVisitor { 
    public:
      virtual ~TVisitor() {}
      virtual void operator()(const ::Tools::Nycr::Syntax::TPath *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TNoPath *that) const = 0;
    protected:
      TVisitor() {}
    };  // TVisitor
  virtual ~TOptPath() {}
  virtual void Accept(const TVisitor &visitor) const = 0;
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const = 0;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const = 0;
  protected:
  TOptPath() {}
};  // TOptPath

// path : opt_path -> name opt_path_tail;
class TPath : public TOptPath {
  NO_COPY_SEMANTICS(TPath);
  public:
  TPath(TName *name, TOptPathTail *opt_path_tail)
      : Name(name), OptPathTail(opt_path_tail) {
    assert(name);
    assert(opt_path_tail);
  }
  virtual ~TPath();
  virtual void Accept(const TOptPath::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TName *GetName() const {
    assert(this);
    return Name;
  }
  const TOptPathTail *GetOptPathTail() const {
    assert(this);
    return OptPathTail;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TName *Name;
  TOptPathTail *OptPathTail;
};  // TPath

// opt_path_tail;
class TOptPathTail {
  NO_COPY_SEMANTICS(TOptPathTail);
  public:
  class TVisitor { 
    public:
      virtual ~TVisitor() {}
      virtual void operator()(const ::Tools::Nycr::Syntax::TNoPathTail *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TPathTail *that) const = 0;
    protected:
      TVisitor() {}
    };  // TVisitor
  virtual ~TOptPathTail() {}
  virtual void Accept(const TVisitor &visitor) const = 0;
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const = 0;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const = 0;
  protected:
  TOptPathTail() {}
};  // TOptPathTail

// no_path_tail : opt_path_tail -> empty;
class TNoPathTail : public TOptPathTail {
  NO_COPY_SEMANTICS(TNoPathTail);
  public:
  TNoPathTail() {}
  virtual void Accept(const TOptPathTail::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
};  // TNoPathTail

// path_tail : opt_path_tail -> slash path;
class TPathTail : public TOptPathTail {
  NO_COPY_SEMANTICS(TPathTail);
  public:
  TPathTail(TSlash *slash, TPath *path)
      : Slash(slash), Path(path) {
    assert(slash);
    assert(path);
  }
  virtual ~TPathTail();
  virtual void Accept(const TOptPathTail::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TSlash *GetSlash() const {
    assert(this);
    return Slash;
  }
  const TPath *GetPath() const {
    assert(this);
    return Path;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TSlash *Slash;
  TPath *Path;
};  // TPathTail

// slash = "\"/\"" pri 0;
class TSlash {
  NO_COPY_SEMANTICS(TSlash);
  public:
  TSlash(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TSlash

// no_path : opt_path -> empty;
class TNoPath : public TOptPath {
  NO_COPY_SEMANTICS(TNoPath);
  public:
  TNoPath() {}
  virtual void Accept(const TOptPath::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
};  // TNoPath

// close_angle = "\">\"" pri 0;
class TCloseAngle {
  NO_COPY_SEMANTICS(TCloseAngle);
  public:
  TCloseAngle(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TCloseAngle

// opt_expected_sr;
class TOptExpectedSr {
  NO_COPY_SEMANTICS(TOptExpectedSr);
  public:
  class TVisitor { 
    public:
      virtual ~TVisitor() {}
      virtual void operator()(const ::Tools::Nycr::Syntax::TNoExpectedSr *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TExpectedSr *that) const = 0;
    protected:
      TVisitor() {}
    };  // TVisitor
  virtual ~TOptExpectedSr() {}
  virtual void Accept(const TVisitor &visitor) const = 0;
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const = 0;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const = 0;
  protected:
  TOptExpectedSr() {}
};  // TOptExpectedSr

// no_expected_sr : opt_expected_sr -> empty;
class TNoExpectedSr : public TOptExpectedSr {
  NO_COPY_SEMANTICS(TNoExpectedSr);
  public:
  TNoExpectedSr() {}
  virtual void Accept(const TOptExpectedSr::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
};  // TNoExpectedSr

// expected_sr : opt_expected_sr -> sr_kwd int_literal;
class TExpectedSr : public TOptExpectedSr {
  NO_COPY_SEMANTICS(TExpectedSr);
  public:
  TExpectedSr(TSrKwd *sr_kwd, TIntLiteral *int_literal)
      : SrKwd(sr_kwd), IntLiteral(int_literal) {
    assert(sr_kwd);
    assert(int_literal);
  }
  virtual ~TExpectedSr();
  virtual void Accept(const TOptExpectedSr::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TSrKwd *GetSrKwd() const {
    assert(this);
    return SrKwd;
  }
  const TIntLiteral *GetIntLiteral() const {
    assert(this);
    return IntLiteral;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TSrKwd *SrKwd;
  TIntLiteral *IntLiteral;
};  // TExpectedSr

// sr_kwd = "sr" pri 0;
class TSrKwd {
  NO_COPY_SEMANTICS(TSrKwd);
  public:
  TSrKwd(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TSrKwd

// int_literal = "(\\+|\\-)?[[:digit:]]+" pri 0;
class TIntLiteral {
  NO_COPY_SEMANTICS(TIntLiteral);
  public:
  TIntLiteral(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TIntLiteral

// opt_expected_rr;
class TOptExpectedRr {
  NO_COPY_SEMANTICS(TOptExpectedRr);
  public:
  class TVisitor { 
    public:
      virtual ~TVisitor() {}
      virtual void operator()(const ::Tools::Nycr::Syntax::TNoExpectedRr *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TExpectedRr *that) const = 0;
    protected:
      TVisitor() {}
    };  // TVisitor
  virtual ~TOptExpectedRr() {}
  virtual void Accept(const TVisitor &visitor) const = 0;
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const = 0;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const = 0;
  protected:
  TOptExpectedRr() {}
};  // TOptExpectedRr

// no_expected_rr : opt_expected_rr -> empty;
class TNoExpectedRr : public TOptExpectedRr {
  NO_COPY_SEMANTICS(TNoExpectedRr);
  public:
  TNoExpectedRr() {}
  virtual void Accept(const TOptExpectedRr::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
};  // TNoExpectedRr

// expected_rr : opt_expected_rr -> rr_kwd int_literal;
class TExpectedRr : public TOptExpectedRr {
  NO_COPY_SEMANTICS(TExpectedRr);
  public:
  TExpectedRr(TRrKwd *rr_kwd, TIntLiteral *int_literal)
      : RrKwd(rr_kwd), IntLiteral(int_literal) {
    assert(rr_kwd);
    assert(int_literal);
  }
  virtual ~TExpectedRr();
  virtual void Accept(const TOptExpectedRr::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TRrKwd *GetRrKwd() const {
    assert(this);
    return RrKwd;
  }
  const TIntLiteral *GetIntLiteral() const {
    assert(this);
    return IntLiteral;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TRrKwd *RrKwd;
  TIntLiteral *IntLiteral;
};  // TExpectedRr

// rr_kwd = "rr" pri 0;
class TRrKwd {
  NO_COPY_SEMANTICS(TRrKwd);
  public:
  TRrKwd(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TRrKwd

// oper : kind -> name opt_super pattern prec_level_ref:name assoc semi;
class TOper : public TKind {
  NO_COPY_SEMANTICS(TOper);
  public:
  TOper(TName *name, TOptSuper *opt_super, TPattern *pattern, TName *prec_level_ref, TAssoc *assoc, TSemi *semi)
      : Name(name), OptSuper(opt_super), Pattern(pattern), PrecLevelRef(prec_level_ref), Assoc(assoc), Semi(semi) {
    assert(name);
    assert(opt_super);
    assert(pattern);
    assert(prec_level_ref);
    assert(assoc);
    assert(semi);
  }
  virtual ~TOper();
  virtual void Accept(const TKind::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  virtual void Accept(const TDecl::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TName *GetName() const {
    assert(this);
    return Name;
  }
  const TOptSuper *GetOptSuper() const {
    assert(this);
    return OptSuper;
  }
  const TPattern *GetPattern() const {
    assert(this);
    return Pattern;
  }
  const TName *GetPrecLevelRef() const {
    assert(this);
    return PrecLevelRef;
  }
  const TAssoc *GetAssoc() const {
    assert(this);
    return Assoc;
  }
  const TSemi *GetSemi() const {
    assert(this);
    return Semi;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TName *Name;
  TOptSuper *OptSuper;
  TPattern *Pattern;
  TName *PrecLevelRef;
  TAssoc *Assoc;
  TSemi *Semi;
};  // TOper

// pattern -> eq str_literal opt_pri_level;
class TPattern {
  NO_COPY_SEMANTICS(TPattern);
  public:
  TPattern(TEq *eq, TStrLiteral *str_literal, TOptPriLevel *opt_pri_level)
      : Eq(eq), StrLiteral(str_literal), OptPriLevel(opt_pri_level) {
    assert(eq);
    assert(str_literal);
    assert(opt_pri_level);
  }
  virtual ~TPattern();
  const TEq *GetEq() const {
    assert(this);
    return Eq;
  }
  const TStrLiteral *GetStrLiteral() const {
    assert(this);
    return StrLiteral;
  }
  const TOptPriLevel *GetOptPriLevel() const {
    assert(this);
    return OptPriLevel;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TEq *Eq;
  TStrLiteral *StrLiteral;
  TOptPriLevel *OptPriLevel;
};  // TPattern

// eq = "\"=\"" pri 0;
class TEq {
  NO_COPY_SEMANTICS(TEq);
  public:
  TEq(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TEq

// str_literal;
class TStrLiteral {
  NO_COPY_SEMANTICS(TStrLiteral);
  public:
  class TVisitor { 
    public:
      virtual ~TVisitor() {}
      virtual void operator()(const ::Tools::Nycr::Syntax::TSingleQuotedRawStrLiteral *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TDoubleQuotedStrLiteral *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TSingleQuotedStrLiteral *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TDoubleQuotedRawStrLiteral *that) const = 0;
    protected:
      TVisitor() {}
    };  // TVisitor
  virtual ~TStrLiteral() {}
  virtual void Accept(const TVisitor &visitor) const = 0;
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const = 0;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const = 0;
  protected:
  TStrLiteral() {}
};  // TStrLiteral

// single_quoted_raw_str_literal : str_literal = "{SINGLE_QUOTED_RAW_STRING}" pri 1;
class TSingleQuotedRawStrLiteral : public TStrLiteral {
  NO_COPY_SEMANTICS(TSingleQuotedRawStrLiteral);
  public:
  TSingleQuotedRawStrLiteral(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  virtual void Accept(const TStrLiteral::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TSingleQuotedRawStrLiteral

// double_quoted_str_literal : str_literal = "{DOUBLE_QUOTED_STRING}" pri 0;
class TDoubleQuotedStrLiteral : public TStrLiteral {
  NO_COPY_SEMANTICS(TDoubleQuotedStrLiteral);
  public:
  TDoubleQuotedStrLiteral(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  virtual void Accept(const TStrLiteral::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TDoubleQuotedStrLiteral

// single_quoted_str_literal : str_literal = "{SINGLE_QUOTED_STRING}" pri 0;
class TSingleQuotedStrLiteral : public TStrLiteral {
  NO_COPY_SEMANTICS(TSingleQuotedStrLiteral);
  public:
  TSingleQuotedStrLiteral(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  virtual void Accept(const TStrLiteral::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TSingleQuotedStrLiteral

// double_quoted_raw_str_literal : str_literal = "{DOUBLE_QUOTED_RAW_STRING}" pri 1;
class TDoubleQuotedRawStrLiteral : public TStrLiteral {
  NO_COPY_SEMANTICS(TDoubleQuotedRawStrLiteral);
  public:
  TDoubleQuotedRawStrLiteral(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  virtual void Accept(const TStrLiteral::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TDoubleQuotedRawStrLiteral

// opt_pri_level;
class TOptPriLevel {
  NO_COPY_SEMANTICS(TOptPriLevel);
  public:
  class TVisitor { 
    public:
      virtual ~TVisitor() {}
      virtual void operator()(const ::Tools::Nycr::Syntax::TPriLevel *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TNoPriLevel *that) const = 0;
    protected:
      TVisitor() {}
    };  // TVisitor
  virtual ~TOptPriLevel() {}
  virtual void Accept(const TVisitor &visitor) const = 0;
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const = 0;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const = 0;
  protected:
  TOptPriLevel() {}
};  // TOptPriLevel

// pri_level : opt_pri_level -> pri_kwd int_literal;
class TPriLevel : public TOptPriLevel {
  NO_COPY_SEMANTICS(TPriLevel);
  public:
  TPriLevel(TPriKwd *pri_kwd, TIntLiteral *int_literal)
      : PriKwd(pri_kwd), IntLiteral(int_literal) {
    assert(pri_kwd);
    assert(int_literal);
  }
  virtual ~TPriLevel();
  virtual void Accept(const TOptPriLevel::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TPriKwd *GetPriKwd() const {
    assert(this);
    return PriKwd;
  }
  const TIntLiteral *GetIntLiteral() const {
    assert(this);
    return IntLiteral;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TPriKwd *PriKwd;
  TIntLiteral *IntLiteral;
};  // TPriLevel

// pri_kwd = "pri" pri 0;
class TPriKwd {
  NO_COPY_SEMANTICS(TPriKwd);
  public:
  TPriKwd(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TPriKwd

// no_pri_level : opt_pri_level -> empty;
class TNoPriLevel : public TOptPriLevel {
  NO_COPY_SEMANTICS(TNoPriLevel);
  public:
  TNoPriLevel() {}
  virtual void Accept(const TOptPriLevel::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
};  // TNoPriLevel

// assoc;
class TAssoc {
  NO_COPY_SEMANTICS(TAssoc);
  public:
  class TVisitor { 
    public:
      virtual ~TVisitor() {}
      virtual void operator()(const ::Tools::Nycr::Syntax::TNonassocKwd *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TLeftKwd *that) const = 0;
      virtual void operator()(const ::Tools::Nycr::Syntax::TRightKwd *that) const = 0;
    protected:
      TVisitor() {}
    };  // TVisitor
  virtual ~TAssoc() {}
  virtual void Accept(const TVisitor &visitor) const = 0;
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const = 0;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const = 0;
  protected:
  TAssoc() {}
};  // TAssoc

// nonassoc_kwd : assoc = "nonassoc" pri 0;
class TNonassocKwd : public TAssoc {
  NO_COPY_SEMANTICS(TNonassocKwd);
  public:
  TNonassocKwd(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  virtual void Accept(const TAssoc::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TNonassocKwd

// left_kwd : assoc = "left" pri 0;
class TLeftKwd : public TAssoc {
  NO_COPY_SEMANTICS(TLeftKwd);
  public:
  TLeftKwd(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  virtual void Accept(const TAssoc::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TLeftKwd

// right_kwd : assoc = "right" pri 0;
class TRightKwd : public TAssoc {
  NO_COPY_SEMANTICS(TRightKwd);
  public:
  TRightKwd(int start_line, int start_col, int limit_line, int limit_col, const char *text, int len)
      : Lexeme(start_line, start_col, limit_line, limit_col, text, len) {}
  virtual void Accept(const TAssoc::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const ::Tools::Nycr::TLexeme &GetLexeme() const {
    assert(this);
    return Lexeme;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  ::Tools::Nycr::TLexeme Lexeme;
};  // TRightKwd

// keyword : kind -> name opt_super pattern semi;
class TKeyword : public TKind {
  NO_COPY_SEMANTICS(TKeyword);
  public:
  TKeyword(TName *name, TOptSuper *opt_super, TPattern *pattern, TSemi *semi)
      : Name(name), OptSuper(opt_super), Pattern(pattern), Semi(semi) {
    assert(name);
    assert(opt_super);
    assert(pattern);
    assert(semi);
  }
  virtual ~TKeyword();
  virtual void Accept(const TKind::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  virtual void Accept(const TDecl::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TName *GetName() const {
    assert(this);
    return Name;
  }
  const TOptSuper *GetOptSuper() const {
    assert(this);
    return OptSuper;
  }
  const TPattern *GetPattern() const {
    assert(this);
    return Pattern;
  }
  const TSemi *GetSemi() const {
    assert(this);
    return Semi;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TName *Name;
  TOptSuper *OptSuper;
  TPattern *Pattern;
  TSemi *Semi;
};  // TKeyword

// bad_decl : decl -> error semi;
class TBadDecl : public TDecl {
  NO_COPY_SEMANTICS(TBadDecl);
  public:
  TBadDecl(TSemi *semi)
      : Semi(semi) {
    assert(semi);
  }
  virtual ~TBadDecl();
  virtual void Accept(const TDecl::TVisitor &visitor) const {
    assert(this);
    assert(&visitor);
    visitor(this);
  }
  const TSemi *GetSemi() const {
    assert(this);
    return Semi;
  }
  virtual void Write(std::ostream &strm, size_t depth, const char *as_member) const;
  virtual bool Test(::Tools::Nycr::Test::TNode *that, const char *as_member) const;
  private:
  TSemi *Semi;
};  // TBadDecl

}  // Syntax
}  // Nycr
}  // Tools
