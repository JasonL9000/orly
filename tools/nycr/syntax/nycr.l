/* <tools/nycr/syntax/nycr.l>

   This file was generated by nycr. */

%option noyywrap nodefault bison-bridge bison-locations reentrant
%option prefix="tools_nycr_syntax__"
%x COMMENT

%{
#include <cstdlib>
#include <cstring>
#include <tools/nycr/syntax/nycr.cst.h>
using namespace Tools::Nycr::Syntax;
#define YY_EXTRA_TYPE yy_extra_t
#include <tools/nycr/syntax/nycr.bison.hh>
void tools_nycr_syntax__error(const YYLTYPE *, void*, Tools::Nycr::TContext &ctx, char const *);
#define YY_USER_ACTION \
  yylloc->first_line = yyextra.line; \
  yylloc->first_column = yyextra.column; \
  yylloc->last_line = yyextra.line; \
  yylloc->last_column = yyextra.column + yyleng; \
  yyextra.column += yyleng;


%}

SINGLE_QUOTE \'
DOUBLE_QUOTE \"
BACKSLASH \\
RAW_STRING_MARK (r|R)
ESCAPE_SEQUENCE {BACKSLASH}({SINGLE_QUOTE}|{DOUBLE_QUOTE}|{BACKSLASH}|n|r|f|t|x[[:xdigit:]]{2})
SINGLE_QUOTED_STRING {SINGLE_QUOTE}([^'\n\t\\]|{ESCAPE_SEQUENCE})*{SINGLE_QUOTE}
DOUBLE_QUOTED_STRING {DOUBLE_QUOTE}([^"\n\t\\]|{ESCAPE_SEQUENCE})*{DOUBLE_QUOTE}
SINGLE_QUOTED_RAW_STRING {RAW_STRING_MARK}{SINGLE_QUOTE}[^'\n\t]*{SINGLE_QUOTE}
DOUBLE_QUOTED_RAW_STRING {RAW_STRING_MARK}{DOUBLE_QUOTE}[^"\n\t]*{DOUBLE_QUOTE}
DOUBLE_QUOTED_NON_MARK_RAW_STRING {DOUBLE_QUOTE}[^"\n\t]*{DOUBLE_QUOTE}

%%

"->" {
  yylval->arrow = new TArrow(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return Arrow;
}

"/" {
  yylval->slash = new TSlash(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return Slash;
}

":" {
  yylval->colon = new TColon(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return Colon;
}

";" {
  yylval->semi = new TSemi(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return Semi;
}

"<" {
  yylval->open_angle = new TOpenAngle(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return OpenAngle;
}

"=" {
  yylval->eq = new TEq(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return Eq;
}

">" {
  yylval->close_angle = new TCloseAngle(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return CloseAngle;
}

(\+|\-)?[[:digit:]]+ {
  yylval->int_literal = new TIntLiteral(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return IntLiteral;
}

empty {
  yylval->empty_kwd = new TEmptyKwd(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return EmptyKwd;
}

error {
  yylval->error_kwd = new TErrorKwd(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return ErrorKwd;
}

left {
  yylval->left_kwd = new TLeftKwd(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return LeftKwd;
}

nonassoc {
  yylval->nonassoc_kwd = new TNonassocKwd(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return NonassocKwd;
}

prec {
  yylval->prec_kwd = new TPrecKwd(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return PrecKwd;
}

pri {
  yylval->pri_kwd = new TPriKwd(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return PriKwd;
}

right {
  yylval->right_kwd = new TRightKwd(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return RightKwd;
}

rr {
  yylval->rr_kwd = new TRrKwd(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return RrKwd;
}

sr {
  yylval->sr_kwd = new TSrKwd(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return SrKwd;
}

{DOUBLE_QUOTED_STRING} {
  yylval->double_quoted_str_literal = new TDoubleQuotedStrLiteral(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return DoubleQuotedStrLiteral;
}

{SINGLE_QUOTED_STRING} {
  yylval->single_quoted_str_literal = new TSingleQuotedStrLiteral(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return SingleQuotedStrLiteral;
}

{DOUBLE_QUOTED_RAW_STRING} {
  yylval->double_quoted_raw_str_literal = new TDoubleQuotedRawStrLiteral(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return DoubleQuotedRawStrLiteral;
}

{SINGLE_QUOTED_RAW_STRING} {
  yylval->single_quoted_raw_str_literal = new TSingleQuotedRawStrLiteral(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return SingleQuotedRawStrLiteral;
}

[a-zA-Z]+[a-zA-Z0-9_]* {
  yylval->name = new TName(yylloc->first_line, yylloc->first_column, yylloc->last_line, yylloc->last_column, yytext, yyleng);
  return Name;
}

[ \t]+ {}

\n+ {
  ++yyextra.line;
  yyextra.column = 1;
}

"/*" {
  BEGIN(COMMENT);
  yyextra.depth = 1;
}

<COMMENT>"/*" {
  ++yyextra.depth;
}

<COMMENT>"*/" {
  --yyextra.depth;
  if (yyextra.depth <= 0) {
    BEGIN(INITIAL);
  }
}

<COMMENT>\n {
  ++yyextra.line;
  yyextra.column = 1;
}

<COMMENT>. {}

<COMMENT><<EOF>> {
  tools_nycr_syntax__error(yylloc, nullptr, *yyextra.ctx, "EOF in comment");
  yyextra.depth = 0;
  BEGIN(INITIAL);
}

. {
  tools_nycr_syntax__error(yylloc, nullptr, *yyextra.ctx, "illegal char");
}
