/* <orly/server/bg_importer.h>

   Imports data files in the background.

   Copyright 2010-2014 OrlyAtomics, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */

#pragma once

#include <string>
#include <thread>

#include <base/class_traits.h>
#include <base/event_semaphore.h>
#include <base/fs_notifier.h>

namespace Orly {

  namespace Server {

    /* Imports data files in the background. */
    class TBgImporter final {
      NO_COPY(TBgImporter);
      public:

      /* Finalize this class to handle the events generated by the background
         importer. */
      class THandler {
        NO_COPY(THandler);
        public:

        /* Do-little. */
        virtual ~THandler() {}

        protected:

        /* Do-little. */
        THandler() {}

        /* Begin import mode. */
        virtual void BeginBgImport() const noexcept = 0;

        /* End import mode. */
        virtual void EndBgImport() const noexcept = 0;

        /* Import data from the given path. */
        virtual void BgImport(const std::string &path) const noexcept = 0;

        /* For the event handlers. */
        friend class TBgImporter;

      };  // TBgImporter::THandler

      /* Cache the pointer to the event handler and begin watching the given
         directory.  In a background thread, call the event handler when
         appropriate. */
      TBgImporter(const THandler *handler, const char *top_path);

      /* Stop the background thread and wait for it to exit.  Any files not
         yet imported are ignored. */
      ~TBgImporter();

      private:

      /* The entry point of the background thread. */
      void Watch();

      /* Where we send our events. */
      const THandler *Handler;

      /* The path to the dir we watch for sub-dirs. */
      std::string TopPath;

      /* True until the destructor runs, then false to cause the background
         thread to exit. */
      bool KeepGoing;

      /* Generates file system events for us. */
      Base::TFsNotifier FsNotifier;

      /* Set by the destructor to wake up the background thread and make it
         notice that it's time to exit. */
      Base::TEventSemaphore Ping;

      /* The watch descriptor of the top-level directory we watch. */
      int TopWd;

      /* The background thread which enters at Watch(). */
      std::thread Watcher;

    };  // TBgImporter

  }  // Server

}  // Orly
